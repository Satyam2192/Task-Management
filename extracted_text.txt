--- File: /home/sk/Desktop/task management app/client/src/main.jsx ---

import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import App from './App.jsx';
import { store } from './redux/store';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);


--- File: /home/sk/Desktop/task management app/client/src/App.jsx ---

import React from "react";
import { BrowserRouter, Route, Routes, Navigate } from "react-router-dom";
import { useSelector } from "react-redux";
import Header from "./components/Header";
import Dashboard from "./pages/Dashboard";
import TaskList from "./pages/TaskList";
import AddTask from "./pages/AddTask";
import UpdateTask from "./pages/UpdateTask";
import ProtectedRoute from "./components/ProtectedRoute.jsx";
import LogIn from "./pages/LogIn";
import SignUp from "./pages/SignUp";

const App = () => {
  const isAuthenticated = useSelector((state) => !!state.user.currentUser);

  return (
    <BrowserRouter>
      <Header />
      <Routes>
        
        <Route path="/signup" element={<SignUp />} />
        <Route path="/login" element={<LogIn />} />

        <Route
          path="/"
          element={<ProtectedRoute Component={Dashboard} />}
        />
        <Route
          path="/tasklist"
          element={<ProtectedRoute Component={TaskList} />}
        />
        <Route
          path="/addtask"
          element={<ProtectedRoute Component={AddTask} />}
        />
        <Route
          path="/updatetask/:id"
          element={<ProtectedRoute Component={UpdateTask} />}
        />
      </Routes>
    </BrowserRouter>
  );
};

export default App;


--- File: /home/sk/Desktop/task management app/client/src/index.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;



--- File: /home/sk/Desktop/task management app/client/src/redux/store.js ---

import { combineReducers, configureStore } from '@reduxjs/toolkit';
import userReducer from './user/userSlice';
import taskReducer from './slices/taskSlice'; 
import { persistReducer, persistStore } from 'redux-persist';
import storage from 'redux-persist/lib/storage';

const rootReducer = combineReducers({
  user: userReducer,
  tasks: taskReducer, 
});

const persistConfig = {
  key: 'root',
  storage,
  version: 1,
};

const persistedReducer = persistReducer(persistConfig, rootReducer);

export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: false,
    }),
});

export const persistor = persistStore(store);


--- File: /home/sk/Desktop/task management app/client/src/redux/slices/taskSlice.js ---

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (_, thunkAPI) => {
  try {
    const response = await fetch('/api/tasks', {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    });
    if (!response.ok) {
      const errorText = await response.text();
      console.error('API Error:', errorText);
      throw new Error(errorText);
    }
    return await response.json();
  } catch (error) {
    console.error('Fetch Tasks Error:', error.message); 
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const addTask = createAsyncThunk('tasks/addTask', async (taskData, thunkAPI) => {
  try {
    const response = await fetch('/api/tasks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
      body: JSON.stringify(taskData),
    });
    if (!response.ok) {
      throw new Error(await response.text());
    }
    return await response.json();
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const deleteTask = createAsyncThunk('tasks/deleteTask', async (taskId, thunkAPI) => {
  try {
    const response = await fetch(`/api/tasks/${taskId}`, {
      method: 'DELETE',
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    });
    if (!response.ok) {
      throw new Error(await response.text());
    }
    return taskId;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

const taskSlice = createSlice({
  name: 'tasks',
  initialState: {
    items: [], // Ensure items is initialized as an empty array
    status: 'idle', // Initial status is idle
    error: null, // Initialize error as null
  },
  reducers: {
    clearError(state) {
      state.error = null; // Clear any error message
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchTasks.pending, (state) => {
        state.status = 'loading'; // Set status to loading when fetching
      })
      .addCase(fetchTasks.fulfilled, (state, action) => {
        state.status = 'succeeded'; // Set status to succeeded when fetching is successful
        state.items = action.payload; // Populate the items with the fetched data
      })
      .addCase(fetchTasks.rejected, (state, action) => {
        state.status = 'failed'; // Set status to failed if the fetching fails
        state.error = action.payload; // Set error with the message
      })
      .addCase(deleteTask.fulfilled, (state, action) => {
        state.items = state.items.filter((task) => task.id !== action.payload); 
      })
      .addCase(addTask.fulfilled, (state, action) => {
        state.items = [...state.items, action.payload]; 
      })

  },
});

export const { clearError } = taskSlice.actions;

export default taskSlice.reducer;


--- File: /home/sk/Desktop/task management app/client/src/redux/user/userSlice.js ---

import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  currentUser: null,
  error: null,
  loading: false,
};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    signInStart: (state) => {
      state.loading = true;
    },
    signInSuccess: (state, action) => {
      state.currentUser = action.payload;
      state.loading = false;
      state.error = null;
    },
    signInFailure: (state, action) => {
      state.error = action.payload;
      state.loading = false;
    },
    updateUserStart: (state) => {
      state.loading = true;
    },
    updateUserSuccess: (state, action) => {
      state.currentUser = action.payload;
      state.loading = false;
      state.error = null;
    },
    updateUserFailure: (state, action) => {
      state.error = action.payload;
      state.loading = false;
    },
    deleteUserStart: (state) => {
      state.loading = true;
    },
    deleteUserSuccess: (state) => {
      state.currentUser = null;
      state.loading = false;
      state.error = null;
    },
    deleteUserFailure: (state, action) => {
      state.error = action.payload;
      state.loading = false;
    },
    signOutUserStart: (state) => {
      state.loading = true;
    },
    signOutUserSuccess: (state) => {
      state.currentUser = null;
      state.loading = false;
      state.error = null;
    },
    signOutUserFailure: (state, action) => {
      state.error = action.payload;
      state.loading = false;
    },
  },
});

export const {
  signInStart,
  signInSuccess,
  signInFailure,
  updateUserFailure,
  updateUserSuccess,
  updateUserStart,
  deleteUserFailure,
  deleteUserSuccess,
  deleteUserStart,
  signOutUserFailure,
  signOutUserSuccess,
  signOutUserStart,
} = userSlice.actions;

export default userSlice.reducer;

--- File: /home/sk/Desktop/task management app/client/src/pages/UpdateTask.jsx ---

import React from "react";
import { useParams } from "react-router-dom";
import { useDispatch } from "react-redux";
import { fetchTasks } from "../redux/slices/taskSlice";
import TaskForm from "../components/TaskForm";

const UpdateTask = () => {
  const { id } = useParams();
  const dispatch = useDispatch();

  const handleUpdateTask = (taskData) => {
    const formattedTaskData = {
      ...taskData,
      startTime: new Date(taskData.startTime).toISOString().slice(0, 16),
      endTime: new Date(taskData.endTime).toISOString().slice(0, 16),
    };
    return fetch(`/api/tasks/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify(formattedTaskData),
    }).then((response) => {
      if (response.ok) {
        dispatch(fetchTasks());
        alert("Task updated successfully!");
      } else {
        return response.json().then((err) => alert(err.message));
      }
    });
  };

  return <TaskForm taskId={id} onSubmit={handleUpdateTask} />;
};

export default UpdateTask;


--- File: /home/sk/Desktop/task management app/client/src/pages/TaskList.jsx ---

import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchTasks, deleteTask } from "../redux/slices/taskSlice";
import { useNavigate } from "react-router-dom";

const TaskList = () => {
  const dispatch = useDispatch();
  const tasks = useSelector((state) => state.tasks?.items || []); // Safeguard with default empty array
  const taskStatus = useSelector((state) => state.tasks?.status || "idle");
  const error = useSelector((state) => state.tasks?.error || null);
  const [priorityFilter, setPriorityFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [sortOption, setSortOption] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    if (taskStatus === "idle") {
      dispatch(fetchTasks());
    }
  }, [dispatch, taskStatus]);

  const handleDelete = (taskId) => {
    if (window.confirm("Are you sure you want to delete this task?")) {
      dispatch(deleteTask(taskId)).then(() => {
        dispatch(fetchTasks()); 
      });
    }
  };

  const filteredTasks = tasks
    .filter(
      (task) =>
        (priorityFilter ? task.priority === Number(priorityFilter) : true) &&
        (statusFilter ? task.status === statusFilter : true)
    )
    .sort((a, b) => {
      if (sortOption === "startTime") {
        return new Date(a.startTime) - new Date(b.startTime);
      } else if (sortOption === "endTime") {
        return new Date(a.endTime) - new Date(b.endTime);
      }
      return 0;
    });

  return (
    <div className="p-4">
      <h1 className="text-lg font-bold mb-4">Task List</h1>

      {error && <p className="text-red-500 mb-4">Error: {error}. Please check the console for details.</p>}

      <div className="flex justify-between mb-4">
        <div>
          <select
            className="border p-2 mr-2"
            value={priorityFilter}
            onChange={(e) => setPriorityFilter(e.target.value)}
          >
            <option value="">All Priorities</option>
            <option value="1">1 - Low</option>
            <option value="2">2 - Medium</option>
            <option value="3">3 - High</option>
          </select>

          <select
            className="border p-2 mr-2"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="finished">Finished</option>
          </select>

          <select
            className="border p-2"
            value={sortOption}
            onChange={(e) => setSortOption(e.target.value)}
          >
            <option value="">Sort By</option>
            <option value="startTime">Start Time</option>
            <option value="endTime">End Time</option>
          </select>
        </div>

        <button
          className="bg-blue-500 text-white py-2 px-4 rounded-lg"
          onClick={() => navigate("/addtask")}
        >
          Add Task
        </button>
      </div>

      {filteredTasks.length === 0 ? (
        <p>No tasks available.</p>
      ) : (
        <table className="min-w-full table-auto border-collapse border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="border border-gray-300 px-4 py-2">Title</th>
              <th className="border border-gray-300 px-4 py-2">Priority</th>
              <th className="border border-gray-300 px-4 py-2">Status</th>
              <th className="border border-gray-300 px-4 py-2">Start Time</th>
              <th className="border border-gray-300 px-4 py-2">End Time</th>
              <th className="border border-gray-300 px-4 py-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredTasks.map((task) => (
              <tr key={task._id} className="bg-white border-b hover:bg-gray-100">
                <td className="border border-gray-300 px-4 py-2">{task.title}</td>
                <td className="border border-gray-300 px-4 py-2">{task.priority}</td>
                <td className="border border-gray-300 px-4 py-2">{task.status}</td>
                <td className="border border-gray-300 px-4 py-2">
                  {new Date(task.startTime).toLocaleString()}
                </td>
                <td className="border border-gray-300 px-4 py-2">
                  {task.status === "finished"
                    ? new Date(task.endTime).toLocaleString()
                    : "Estimated"}
                </td>
                <td className="border border-gray-300 px-4 py-2">
                  <button
                    className="text-blue-500 mr-4"
                    onClick={() => navigate(`/updatetask/${task._id}`)}
                  >
                    Edit
                  </button>
                  <button
                    className="text-red-500"
                    onClick={() => handleDelete(task._id)} // Use `_id` here
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default TaskList;


--- File: /home/sk/Desktop/task management app/client/src/pages/AddTask.jsx ---

import React from "react";
import { useDispatch } from "react-redux";
import { fetchTasks } from "../redux/slices/taskSlice";
import TaskForm from "../components/TaskForm";

const AddTask = () => {
  const dispatch = useDispatch();

  const handleAddTask = (taskData) => {
    const formattedTaskData = {
      ...taskData,
      startTime: new Date(taskData.startTime).toISOString().slice(0, 16),
      endTime: new Date(taskData.endTime).toISOString().slice(0, 16),
    };
  
    return fetch("/api/tasks", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify(formattedTaskData),
    }).then((response) => {
      if (response.ok) {
        dispatch(fetchTasks());
        alert("Task created successfully!");
      } else {
        return response.json().then((err) => alert(err.message));
      }
    });
  };
  
  

  return <TaskForm onSubmit={handleAddTask} />;
};

export default AddTask;


--- File: /home/sk/Desktop/task management app/client/src/pages/Dashboard.jsx ---

import React, { useEffect, useState } from "react";

const Dashboard = () => {
  const [summary, setSummary] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    setLoading(true);
    setError(null);

    fetch("api/tasks/statistics", {
      headers: {
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
    })
      .then((res) => {
        if (!res.ok) {
          throw new Error(`HTTP error! Status: ${res.status}`);
        }
        return res.json();
      })
      .then((data) => {
        setSummary(data);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        setError("Failed to load data. Please try again later.");
        setLoading(false);
      });
  }, []);

  // Loading state
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full border-purple-600 border-t-transparent"></div>
        <p className="ml-4 text-gray-600">Loading...</p>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-red-500 text-center">
          <p>{error}</p>
          <button
            className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            onClick={() => window.location.reload()}
          >
            Reload
          </button>
        </div>
      </div>
    );
  }

  // No data available state
  if (!summary) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <p className="text-gray-600">No data available.</p>
      </div>
    );
  }

  return (
    <div className="bg-gray-100 min-h-screen">
      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Dashboard Title */}
        <h1 className="text-3xl font-bold text-gray-800 mb-6">Dashboard</h1>

        {/* Summary Section */}
        <div>
          <h2 className="text-lg font-medium text-gray-800">Summary</h2>
          <div className="grid grid-cols-4 gap-6 mt-4">
            <DashboardCard title="Total tasks" value={summary.totalTasks} />
            <DashboardCard
              title="Tasks completed"
              value={`${summary.completedPercentage.toFixed(0)}%`}
            />
            <DashboardCard
              title="Tasks pending"
              value={`${summary.pendingPercentage.toFixed(0)}%`}
            />
            <DashboardCard
              title="Average time per completed task"
              value={`${summary.averageCompletionTime.toFixed(1)} hrs`}
            />
          </div>
        </div>

        {/* Pending Task Summary Section */}
        <div className="mt-10">
          <h2 className="text-lg font-medium text-gray-800">
            Pending task summary
          </h2>
          <div className="grid grid-cols-3 gap-6 mt-4">
            <DashboardCard
              title="Pending tasks"
              value={summary.pendingTasks || 0}
            />
            <DashboardCard
              title="Total time lapsed"
              value={`${summary.timeElapsed || 0} hrs`}
            />
            <DashboardCard
              title="Total time to finish"
              value={`${summary.balanceEstimate || 0} hrs`}
              subtitle="Estimated based on end time"
            />
          </div>
        </div>

        {/* Task Priority Table */}
        <div className="mt-10">
          <h2 className="text-lg font-medium text-gray-800">
            Task Priority Breakdown
          </h2>
          <table className="w-full border-collapse border border-gray-300 mt-4">
            <thead>
              <tr className="bg-gray-200">
                <th className="border border-gray-300 px-4 py-2 text-left text-sm font-medium text-gray-800">
                  Task Priority
                </th>
                <th className="border border-gray-300 px-4 py-2 text-left text-sm font-medium text-gray-800">
                  Pending Tasks
                </th>
                <th className="border border-gray-300 px-4 py-2 text-left text-sm font-medium text-gray-800">
                  Time Lapsed (hrs)
                </th>
                <th className="border border-gray-300 px-4 py-2 text-left text-sm font-medium text-gray-800">
                  Time to Finish (hrs)
                </th>
              </tr>
            </thead>
            <tbody>
              {summary.priorityBreakdown?.length > 0 ? (
                summary.priorityBreakdown.map((item, index) => (
                  <tr key={index} className="bg-white hover:bg-gray-50">
                    <td className="border border-gray-300 px-4 py-2">
                      {item.priority}
                    </td>
                    <td className="border border-gray-300 px-4 py-2">
                      {item.pendingTasks}
                    </td>
                    <td className="border border-gray-300 px-4 py-2">
                      {item.timeLapsed}
                    </td>
                    <td className="border border-gray-300 px-4 py-2">
                      {item.timeToFinish}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan="4"
                    className="border border-gray-300 px-4 py-2 text-center text-gray-500"
                  >
                    No priority breakdown available.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

// DashboardCard Component
const DashboardCard = ({ title, value, subtitle }) => (
  <div className="bg-white shadow-md rounded-lg p-6">
    <p className="text-purple-600 text-3xl font-bold">
      {value !== undefined ? value : "N/A"}
    </p>
    <p className="text-gray-600 text-sm">{title}</p>
    {subtitle && <p className="text-gray-400 text-xs italic mt-1">{subtitle}</p>}
  </div>
);

export default Dashboard;


--- File: /home/sk/Desktop/task management app/client/src/components/ProtectedRoute.jsx ---

import { useSelector } from "react-redux";
import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ Component }) => {
  const isAuthenticated = useSelector((state) => !!state.user.currentUser);

  return isAuthenticated ? <Component /> : <Navigate to="/login" />;
};

export default ProtectedRoute;


--- File: /home/sk/Desktop/task management app/client/src/components/TaskForm.jsx ---

import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const TaskForm = ({ taskId, initialTaskData = {}, onSubmit }) => {
  const [task, setTask] = useState({
    title: "",
    priority: "",
    status: "pending",
    startTime: "",
    endTime: "",
    ...initialTaskData, // If editing, fill in initial task data
  });
  const navigate = useNavigate();

  useEffect(() => {
    if (taskId) {
      // Fetch the existing task if updating
      fetch(`/api/tasks/${taskId}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      })
        .then((res) => res.json())
        .then((data) => setTask(data))
        .catch((error) => console.error("Error fetching task:", error));
    }
  }, [taskId]);

  const handleSubmit = (e) => {
    e.preventDefault();

    // Validate fields
    if (!task.title || !task.priority || !task.startTime || !task.endTime) {
      alert("All fields are required!");
      return;
    }

    onSubmit(task)
      .then(() => navigate("/tasklist"))
      .catch((error) => console.error("Error submitting task:", error));
  };

  return (
    <div className="bg-white max-w-md mx-auto p-4 shadow-lg rounded-lg">
      <h1 className="text-lg font-bold mb-4">{taskId ? "Update Task" : "Add Task"}</h1>
      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label className="block text-sm font-bold mb-2">Title</label>
          <input
            type="text"
            className="border p-2 w-full"
            value={task.title}
            onChange={(e) => setTask({ ...task, title: e.target.value })}
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-bold mb-2">Priority</label>
          <select
            className="border p-2 w-full"
            value={task.priority}
            onChange={(e) => setTask({ ...task, priority: e.target.value })}
          >
            <option value="1">1 - Low</option>
            <option value="2">2 - Medium</option>
            <option value="3">3 - High</option>
          </select>
        </div>
        <div className="mb-4">
          <label className="block text-sm font-bold mb-2">Status</label>
          <select
            className="border p-2 w-full"
            value={task.status}
            onChange={(e) => setTask({ ...task, status: e.target.value })}
          >
            <option value="pending">Pending</option>
            <option value="finished">Finished</option>
          </select>
        </div>
        <div className="mb-4">
          <label className="block text-sm font-bold mb-2">Start Time</label>
          <input
            type="datetime-local"
            className="border p-2 w-full"
            value={task.startTime}
            onChange={(e) => setTask({ ...task, startTime: e.target.value })}
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-bold mb-2">End Time</label>
          <input
            type="datetime-local"
            className="border p-2 w-full"
            value={task.endTime}
            onChange={(e) => setTask({ ...task, endTime: e.target.value })}
          />
        </div>
        <button type="submit" className="bg-blue-500 text-white py-2 px-4 rounded-lg">
          {taskId ? "Update Task" : "Add Task"}
        </button>
      </form>
    </div>
  );
};

export default TaskForm;


--- File: /home/sk/Desktop/task management app/client/src/components/Header.jsx ---

import React from 'react';
import { Link } from 'react-router-dom';

const Header = () => {


  return (
    <header className="bg-[#f8f9fc]">
      <div className="flex justify-between items-center px-6 py-4 border-b-[1px] border-[#e0e0e0]">
        <div className="flex items-center space-x-4">
          <Link to="/" className="text-[#000000] text-[16px] font-medium">
            Dashboard
          </Link>
          <Link to="/tasklist" className="text-[#6c757d] text-[16px]">Task list</Link>
        </div>
        <button className="bg-[#6f42c1] text-white text-[14px] font-medium px-4 py-2 rounded-[4px]">
          Sign out
        </button>
      </div>
    </header>
  );
};

export default Header;


